#!/bin/bash

log="$HOME/.hours"
cfg="$HOME/.hrs.conf"

if [ -f ${cfg} ]; then
    source <(awk -F'=' '
                $0 ~ /^#/ { next }
                NF > 1 && $2 !~ /^[[:space:]"'"'"']*$/ {
                    sub("^ *", "", $2)
                    print $1 "=" $2
                }
                ' ${cfg})
fi

if [ ! -f "${log}" ]; then
    if [ -z "${log}" ]; then
        echo "ERROR: No log file defined"
        exit 2
    else
        touch "${log}"
        echo "Created new log file"
    fi
fi

usage() {
    {
        if [ $# -gt 0 ]; then
            echo $@
        fi
        echo "USAGE: $(basename $0) [-h|--help] [start|end|edit|raw] [ENTRY COMMENT]"

        cat <<-EOF

				Executing without arguments pretty prints all log entries.

				The 'raw' command dumps the log's contents.
				The 'edit' command opens the log in vim.

				Using the 'start' command when there is an ongoing entry
				will split that entry by ending it and starting a new one.

				The 'ENTRY COMMENT' is added to the entry when the 'end'
				command is called. The 'start' command only uses it when
				splitting an entry. It's ignored by the other commands.
EOF
    } >&2
}

if [ $# -gt 0 ]; then
    case $1 in
        start|s|st|sta|star)
            if [ -s "${log}" -a "`tail -1 ${log} | wc -c`" -le "12" ]; then
                echo "Splitting entry..."
                shift
                $0 end $@
            fi
            echo -n "`date +%s` " >> ${log}
            echo "Started entry at: `date +'%F %T'`"
            ;;
        end|e|en)
            {
                echo -n "`date +%s`"
                if [ $# -gt 1 ]; then
                    shift
                    echo -n " $@"
                fi
                echo ""
            } >> ${log}
            echo "Ended entry at: `date +'%F %T'`"
            ;;
        edit|ed|edi)
            exec vim ${log}
            ;;
        raw|r|ra)
            exec cat ${log}
            ;;
        -h|--help)
            usage
            ;;
        *)
            usage "ERROR: Unrecognized command: $1"
            exit 1
            ;;
    esac
else
    awk '
    function printDailyTotal(DAY,   dailySecs) {
        dailySecs = daily[DAY]-68400;
        printf("   \033[33mTotal: %s\033[0m\n", strftime("%H:%M", dailySecs))
    }

    # Ignore commented lines
    $0 ~ /^#/ { next }

    # Fake out the current session
    NF == 1 {
        $0 = $0 strftime("%s") " \033[1;32mONGOING\033[0m"
    }

    NF > 1 {
        # Aggregate the daily hours
        secs = $2-$1
        day = strftime("%Y%m%d", $1)
        daily[day] += secs
        dailyCount[day] += 1

        # Print a newline between the entries of a single day
        if (prevDay != day) {
            if (prevDay != "" && dailyCount[prevDay] > 1) {
                printDailyTotal(prevDay)
            }
            printf("\n")
            prevDay = day
        }

        # Ok, print the entry nicely
        secs -= 68400;
        printf("%s: %s", day, strftime("%H:%M", secs))

        # Print anything else at the end as a "label"
        if (NF > 2) {
            $1 = ""
            $2 = ""
            sub("^ *", "")
            printf(" [%s]", $0)
        }
        printf("\n")
    }

    # Catch the last grouping that needs to be totaled
    END {
        if (dailyCount[day] > 1) {
            printDailyTotal(day)
        }
    }
    ' ${log}
fi
